import java.util.Queue;

public class Traversal{

    public void BFS(GrapNode start){
        Queue<GraphNode> q = new Queue();
        start.visted = true;
        q.enqueue(start);

        while(!q.isEmpty()){
            GraphNode current = q.dequeue();
            System.out.println(current.val);
            for(GraphNode neighbour : node.neighbours){
                if(!neighbour.visted){
                    neighbour.visted = true;
                    q.enqueue(neighbour);
                }
            }
        }
    }

    public void DFS(GraphNode node){
        if(node == null || node.visted) return;
        System.out.println(node.val);

        for(GraphNode neighbour : node.neighbours){
            DFS(neighbour);
        }
    }

    public void BFStoDFS(GraphNode start){
        Stack<GraphNode> stack = new Stack();
        start.visted = true;
        stack.push(start);

        while(!stack.isEmpty()){
            GraphNode node = stack.pop();
            System.out.println(node.val);

            for(GraphNode neighbour: node.neighbours){
                if(!neighbour.visted){
                    neighbour.visted = true;
                    stack.push(neighbour);
                }
            }
        }
    }
}
