//assignment 6
// task 4

 public static void swapChild( BTNode root, int lvl, int M ){
        if(root == null) return;
        if(lvl < M){
            BTNode swap = root.left;
            root.left = root.right;
            root.right = swap;
        }
        swapChild(root.left, lvl+1, M);
        swapChild(root.right, lvl+1, M);
    }

// task 5

public static Integer subtractSummation( BTNode root ){
        int left = helper(root.left);
        int right = helper(root.right);
        return (Integer)left-right; 
    }
    public static int helper(BTNode root){
        if(root == null) return 0;
        Integer temp= (Integer) root.elem;
        return temp + helper(root.left) + helper(root.right);
    }

// task 6

static int sum = 0;
    public static Integer levelSum( BTNode root ){
        //TO DO
        helper(root, 1);
        return (Integer) sum; //remove this line
    }
    public static void helper(BTNode root, int level){
        if(root == null) return;
        if(level % 2 == 0){
            sum += (int) root.elem;
        }
        else{
            sum -= (int) root.elem;        
        }
        helper(root.left, level+1);
        helper(root.right, level+1);
    }

// assignment 7

// task 4

 public static Integer rangeSum( BSTNode root, Integer low, Integer high ){
        if(root == null) return 0;
        if(root.elem >= low && root.elem <= high) return root.elem + rangeSum(root.left, low, high) + rangeSum(root.right, low, high);
        if(root.elem < low){
            return rangeSum(root.right, low, high);
        }
        if(root.elem > high){
            return rangeSum(root.left, low, high);
        }
        return 0;
    }

// task 5

public static Integer mirrorSum( BSTNode root ){
        if(root == null) return 0;
        return (Integer) helper(root.left, root.right);
    }
    public static int helper(BSTNode r1, BSTNode r2){
        if(r1 == null && r2== null) return 0;
        if(r1== null || r2 == null) return 0;
        return r1.elem + r2.elem + helper(r1.left, r2.right) + helper(r1.right, r2.left);
    }

// task 6

public static Boolean isBST( BSTNode root ){
        if(root == null) return true;
        if(root.left !=null && root.left.elem > root.elem) return false;
        if(root.right !=null && root.right.elem < root.elem) return false;
        return isBST(root.left) && isBST(root.right);
    }
